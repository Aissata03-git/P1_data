# -*- coding: utf-8 -*-
"""Aissata_Diarra_covid_dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1a3tEeC4bjVYFV2kJeBzj6CynchJLTt_N
"""

import pandas as pd
import plotly
import plotly.express as px
import plotly.graph_objects as go
import numpy as np

data = pd.read_csv('/content/Data_covid.csv')

data.head()

data.shape

"""Nous allons vérifier si nous avons des données manquantes"""

data.isnull().sum()

data.info()

data.describe(exclude='object')

data.describe(include='object')

nb_total_cas = data.shape[0]
print(f'Le nombre total de cas covid est de {nb_total_cas}')

#Nombre total de morts
total_deaths = data['deaths'].sum()
print(f"Le nombre total de mort est: {total_deaths}")

#Nombre total de cas
total_cases = data['cases'].sum()
print(f"Le nombre total de cas est: {total_cases}")

#Nombre totale de morts enregistrés et le ratio entre nombre de morts sur les cas
ratio_deaths_cases = (total_deaths / total_cases)

print(f"Nombre total de cas: {total_cases}")
print(f"Nombre total de morts: {total_deaths}")
print(f"Ratio morts/cas: {ratio_deaths_cases}")

"""Création d'un diagramme pour le nombre total de cas par mois"""

data_cm = data.groupby('month').sum()['cases'].reset_index()
data_cm

bar_fig = px.bar(data_cm,x='month',y='cases', title= "Nombre total de cas par mois")
bar_fig.update_layout(plot_bgcolor='rgba(0,0,0,0)')
bar_fig.show()

"""
Création d'un diagramme pour le nombre total de morts par mois

"""

data_mm = data.groupby('month').sum()['deaths'].reset_index()
data_mm

bar_fig = px.bar(data_mm,x='month',y='deaths', title= "Nombre total de morts par mois")
bar_fig.update_layout(plot_bgcolor='rgba(0,0,0,0)')
bar_fig.show()

"""Création d'une courbe donnant la tendance des nouveaux cas par jour"""

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['day']
  ys = series['cases']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = data.sort_values('dateRep', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('day')
_ = plt.ylabel('cases')

data.groupby('day')['cases'].sum().plot(title='Tendance des nouveaux cas par jour')
plt.show()

"""Création d'une courbe donnant le cumul des cas par mois"""

cumul_cases = data.groupby('month')['cases'].sum().cumsum()
cumul_cases.plot(title='Cumul des cas par mois')
plt.show()

"""Création d'une courbe donnant le cumul des morts par mois"""

cumul_deaths = data.groupby('month')['deaths'].sum().cumsum()
cumul_deaths.plot(title='Cumul des morts par mois')
plt.show()

"""Création d'une courbe donnant la tendance des morts par jour"""

data.groupby('day')['deaths'].sum().plot(title='Tendance des morts par jour')
plt.show()

"""Top 10 des pays avec le plus de cas"""

top_10_countries_cases = data.groupby('countriesAndTerritories')['cases'].sum().nlargest(10)
print("Top 10 des pays avec le plus de cas:")
print(top_10_countries_cases)

""" Top 10 des pays avec le plus de morts"""

top_10_countries_deaths = data.groupby('countriesAndTerritories')['deaths'].sum().nlargest(10)
print("Top 10 des pays avec le plus de morts:")
print(top_10_countries_deaths)